{"version":3,"file":"static/js/190.4a888637.chunk.js","mappings":"uRAEAA,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEVC,EAAmB,mCAAG,oGACHF,EAAAA,EAAAA,IAAU,sBAAuB,CACtDG,OAAQ,CACNC,QAASH,KAHa,cACpBI,EADoB,yBAMnBA,EAASC,KAAKC,SANK,2CAAH,qDASZC,EAAoB,CAC/BN,oBAAAA,GAGIO,EAAc,mCAAG,WAAMC,GAAN,uFACEV,EAAAA,EAAAA,IAAA,gBAAmBU,GAAM,CAC9CP,OAAQ,CACNC,QAASH,KAHQ,cACfI,EADe,yBAMdA,EAASC,MANK,2CAAH,sDASPK,EAAe,CAC1BF,eAAAA,GAGIG,EAAoB,mCAAG,WAAMC,GAAN,uFACJb,EAAAA,EAAAA,IAAUa,EAAU,CACzCV,OAAQ,CACNC,QAASH,KAHc,cACrBI,EADqB,yBAMpBA,EAASC,MANW,2CAAH,sDASbQ,EAAqB,CAChCF,qBAAAA,GAGIG,EAAiB,mCAAG,WAAMC,GAAN,uFACDhB,EAAAA,EAAAA,IAAA,6BAAgCgB,GAAS,CAC9Db,OAAQ,CACNC,QAASH,KAHW,cAClBI,EADkB,yBAMjBA,EAASC,KAAKC,SANG,2CAAH,sDASVU,EAAkB,CAC7BF,kBAAAA,E,oDCrBF,IA9BmB,SAAC,GAAc,IAAZT,EAAW,EAAXA,KACdY,GAAWC,EAAAA,EAAAA,MACXN,EAAWK,EAASL,SAE1B,OACE,wBACGP,EAAKc,KAAI,SAAAC,GAAK,OACb,yBACE,SAAC,KAAD,CACEC,GAAiB,MAAbT,EAAA,iBAA6BQ,EAAMX,IAAnC,UAA6CW,EAAMX,IACvDa,MAAO,CAAEC,KAAMN,GAFjB,SAIGG,EAAMI,SALFJ,EAAMX,GADF,KAYpB,C,kLCLD,EAbe,SAAC,GAAkB,IAAhBgB,EAAe,EAAfA,SAChB,OACE,kBAAMA,SAAUA,EAAhB,WACE,kBAAOC,KAAK,OAAOC,KAAK,WACxB,mBAAQD,KAAK,SAAb,sBAGL,EC8CD,EAjDmB,WACjB,OAAwCE,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMf,EAAQc,EAAaE,IAAI,SAC/B,GAA4CC,EAAAA,EAAAA,UAAS,IAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,MAEAC,EAAAA,EAAAA,YAAU,WACRH,GAAa,GACb,IAAMI,EAAiB,mCAAG,6GAEcxB,EAAAA,GAAAA,kBAClCD,GAHoB,OAEhB0B,EAFgB,OAKtBP,GAAkB,OAAIO,IALA,gDAOtBH,EAAS,EAAD,IAPc,yBAStBF,GAAa,GATS,4EAAH,qDAavBI,EAAkBzB,EACnB,GAAE,CAACA,IASJ,OACE,gCACGoB,IAAa,SAACO,EAAA,EAAD,KACd,SAAC,EAAD,CAAQjB,SAV2B,SAAAkB,GACrCA,EAAMC,iBACN,IAAMC,EAAOF,EAAMG,OACnBhB,EAAgB,CAAEf,MAAO8B,EAAKE,SAAShC,MAAMiC,MAAMC,SACnDJ,EAAKK,OACN,IAMc,KAAVnC,IACC,0FAEyB,IAA1BkB,EAAekB,SACd,uEAA6CpC,KAE9CA,IAAUoB,IAAa,SAACiB,EAAA,EAAD,CAAY/C,KAAM4B,KAC1C,SAAC,KAAD,IACCI,IAAS,mEAGf,C","sources":["api.js","components/MoviesList/MoviesList.jsx","components/Search/Search.jsx","pages/MoviesPage.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '866c584b953aab9d6c2151363c4952f3';\n\nconst fetchTrendingMovies = async () => {\n  const response = await axios.get('/trending/movie/day', {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.results;\n};\n\nexport const getTrendingMovies = {\n  fetchTrendingMovies,\n};\n\nconst fetchMovieById = async id => {\n  const response = await axios.get(`movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n\nexport const getMovieById = {\n  fetchMovieById,\n};\n\nconst fetchMovieByPathname = async pathname => {\n  const response = await axios.get(pathname, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n\nexport const getMovieByPathname = {\n  fetchMovieByPathname,\n};\n\nconst fetchMovieByQuery = async query => {\n  const response = await axios.get(`search/movie?query=${query}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.results;\n};\n\nexport const getMovieByQuery = {\n  fetchMovieByQuery,\n};\n","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst MoviesList = ({ data }) => {\n  const location = useLocation();\n  const pathname = location.pathname;\n\n  return (\n    <ul>\n      {data.map(movie => (\n        <li key={movie.id}>\n          <Link\n            to={pathname === '/' ? `movies/${movie.id}` : `${movie.id}`}\n            state={{ from: location }}\n          >\n            {movie.title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nMoviesList.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      key: PropTypes.number,\n      id: PropTypes.number,\n      title: PropTypes.string,\n    })\n  ),\n};\n\nexport default MoviesList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Search = ({ onSubmit }) => {\n  return (\n    <form onSubmit={onSubmit}>\n      <input type=\"text\" name=\"query\" />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n\nSearch.propTypes = {\n  onSubmit: PropTypes.func,\n};\n\nexport default Search;\n","import React, { useEffect, useState } from 'react';\nimport { Outlet, useSearchParams } from 'react-router-dom';\nimport { getMovieByQuery } from 'api';\nimport MoviesList from './../components/MoviesList/MoviesList';\nimport Loader from 'components/Loader/Loader';\nimport Search from 'components/Search/Search';\n\nconst MoviesPage = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n  const [searchedMovies, setSearchedMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const getSearchedMovies = async () => {\n      try {\n        const fetchedSearchedMovies = await getMovieByQuery.fetchMovieByQuery(\n          query\n        );\n        setSearchedMovies([...fetchedSearchedMovies]);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getSearchedMovies(query);\n  }, [query]);\n\n  const searchMoviesQuerySubmitHandler = event => {\n    event.preventDefault();\n    const form = event.target;\n    setSearchParams({ query: form.elements.query.value.trim() });\n    form.reset();\n  };\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      <Search onSubmit={searchMoviesQuerySubmitHandler} />\n      {query === '' && (\n        <p>There is something with your query. Please provide correct one</p>\n      )}\n      {searchedMovies.length === 0 && (\n        <p>{`We can't find a video for this query: ${query}`}</p>\n      )}\n      {query && !isLoading && <MoviesList data={searchedMovies} />}\n      <Outlet />\n      {error && <p>Something went wrong. Try again later</p>}\n    </>\n  );\n};\n\nexport default MoviesPage;\n"],"names":["axios","API_KEY","fetchTrendingMovies","params","api_key","response","data","results","getTrendingMovies","fetchMovieById","id","getMovieById","fetchMovieByPathname","pathname","getMovieByPathname","fetchMovieByQuery","query","getMovieByQuery","location","useLocation","map","movie","to","state","from","title","onSubmit","type","name","useSearchParams","searchParams","setSearchParams","get","useState","searchedMovies","setSearchedMovies","isLoading","setIsLoading","error","setError","useEffect","getSearchedMovies","fetchedSearchedMovies","Loader","event","preventDefault","form","target","elements","value","trim","reset","length","MoviesList"],"sourceRoot":""}
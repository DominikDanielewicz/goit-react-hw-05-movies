{"version":3,"file":"static/js/368.7b3ac3cb.chunk.js","mappings":"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","sources":["api.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","pages/MovieAdditionalInfoPage.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '866c584b953aab9d6c2151363c4952f3';\n\nconst fetchTrendingMovies = async () => {\n  const response = await axios.get('/trending/movie/day', {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.results;\n};\n\nexport const getTrendingMovies = {\n  fetchTrendingMovies,\n};\n\nconst fetchMovieById = async id => {\n  const response = await axios.get(`movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n\nexport const getMovieById = {\n  fetchMovieById,\n};\n\nconst fetchMovieByPathname = async pathname => {\n  const response = await axios.get(pathname, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n\nexport const getMovieByPathname = {\n  fetchMovieByPathname,\n};\n\nconst fetchMovieByQuery = async query => {\n  const response = await axios.get(`search/movie?query=${query}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.results;\n};\n\nexport const getMovieByQuery = {\n  fetchMovieByQuery,\n};\n","import styled from 'styled-components';\n\nexport const StyledCast = styled.ul`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: 20px;\n  width: 100%;\n  margin-bottom: 80px;\n`;\n\nexport const CastCard = styled.li`\n  flex-basis: calc((100% - 40px) / 3);\n  max-width: calc((100% - 40px) / 3);\n\n  @media screen and (min-width: 768px) {\n    flex-basis: calc((100% - 60px) / 4);\n    max-width: calc((100% - 60px) / 4);\n  }\n\n  @media screen and (min-width: 1200px) {\n    flex-basis: calc((100% - 80px) / 5);\n    max-width: calc((100% - 80px) / 5);\n  }\n`;\n\nexport const CastImage = styled.img`\n  border-radius: 5px;\n  width: 100%;\n  margin-bottom: 10px;\n`;\n\nexport const CastName = styled.h4`\n  font-size: 16px;\n  font-weight: 500;\n`;\n\nexport const CastRole = styled.p`\n  font-size: 14px;\n`;\n","import React from 'react';\nimport Placeholder from 'images/placeholder.jpg';\nimport PropTypes from 'prop-types';\nimport {\n  StyledCast,\n  CastCard,\n  CastImage,\n  CastName,\n  CastRole,\n} from './Cast.styled';\n\nconst Cast = ({ data }) => {\n  return (\n    <section>\n      <StyledCast>\n        {data.map(actor => (\n          <CastCard key={actor.id}>\n            <CastImage\n              src={\n                actor.profile_path\n                  ? `https://image.tmdb.org/t/p/w200${actor.profile_path}`\n                  : Placeholder\n              }\n              alt={actor.name}\n            />\n            <CastName>{actor.name}</CastName>\n            <CastRole>Character: {actor.character}</CastRole>\n          </CastCard>\n        ))}\n      </StyledCast>\n    </section>\n  );\n};\n\nCast.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      key: PropTypes.number,\n      src: PropTypes.string,\n      alt: PropTypes.string,\n    })\n  ),\n};\n\nexport default Cast;\n","import styled from 'styled-components';\n\nexport const StyledReview = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  width: 100%;\n  margin-bottom: 80px;\n`;\n\nexport const ReviewCard = styled.li`\n  padding: 20px;\n  border: 1px solid #000000;\n  border-radius: 5px;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { StyledReview, ReviewCard } from './Reviews.styled';\n\nconst Reviews = ({ data }) => {\n  return (\n    <section>\n      {data.length === 0 ? (\n        <p>We don't have any reviews for this movie</p>\n      ) : (\n        <StyledReview>\n          {data.map(review => (\n            <ReviewCard key={review.id}>\n              <h3>Author: {review.author}</h3>\n              <p>{review.content}</p>\n            </ReviewCard>\n          ))}\n        </StyledReview>\n      )}\n    </section>\n  );\n};\n\nReviews.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      key: PropTypes.number,\n      author: PropTypes.string,\n      content: PropTypes.string,\n    })\n  ),\n};\n\nexport default Reviews;\n","import Loader from 'components/Loader/Loader';\nimport React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { getMovieByPathname } from '../api';\nimport Cast from 'components/Cast/Cast';\nimport Reviews from 'components/Reviews/Reviews';\n\nconst MovieCastPage = () => {\n  const location = useLocation();\n  const [movieAdditionalInfo, setMovieAdditionalInfo] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const pathname = location.pathname\n    .replace('movies', 'movie')\n    .replace('cast', 'credits');\n\n  useEffect(() => {\n    const getMovieAdditionalInfo = async () => {\n      setIsLoading(true);\n      try {\n        const fetchedIformation = await getMovieByPathname.fetchMovieByPathname(\n          pathname\n        );\n        if (pathname.includes('credits')) {\n          setMovieAdditionalInfo([...fetchedIformation.cast]);\n        }\n        if (pathname.includes('reviews')) {\n          setMovieAdditionalInfo([...fetchedIformation.results]);\n        }\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getMovieAdditionalInfo(pathname);\n  }, [pathname]);\n\n  return (\n    <main>\n      {error && <p>Something went wrong. Try again later</p>}\n      {isLoading && <Loader />}\n      {!isLoading && pathname.includes('credits') && (\n        <Cast data={movieAdditionalInfo} />\n      )}\n      {!isLoading && pathname.includes('reviews') && (\n        <Reviews data={movieAdditionalInfo} />\n      )}\n    </main>\n  );\n};\n\nexport default MovieCastPage;\n"],"names":["axios","API_KEY","fetchTrendingMovies","params","api_key","response","data","results","getTrendingMovies","fetchMovieById","id","getMovieById","fetchMovieByPathname","pathname","getMovieByPathname","fetchMovieByQuery","query","getMovieByQuery","StyledCast","styled","CastCard","CastImage","CastName","CastRole","map","actor","src","profile_path","Placeholder","alt","name","character","StyledReview","ReviewCard","length","review","author","content","location","useLocation","useState","movieAdditionalInfo","setMovieAdditionalInfo","isLoading","setIsLoading","error","setError","replace","useEffect","getMovieAdditionalInfo","fetchedIformation","includes","cast","Loader"],"sourceRoot":""}
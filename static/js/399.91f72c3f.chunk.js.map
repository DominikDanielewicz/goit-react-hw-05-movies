{"version":3,"file":"static/js/399.91f72c3f.chunk.js","mappings":"uRAEAA,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEVC,EAAmB,mCAAG,oGACHF,EAAAA,EAAAA,IAAU,sBAAuB,CACtDG,OAAQ,CACNC,QAASH,KAHa,cACpBI,EADoB,yBAMnBA,EAASC,KAAKC,SANK,2CAAH,qDASZC,EAAoB,CAC/BN,oBAAAA,GAGIO,EAAc,mCAAG,WAAMC,GAAN,uFACEV,EAAAA,EAAAA,IAAA,gBAAmBU,GAAM,CAC9CP,OAAQ,CACNC,QAASH,KAHQ,cACfI,EADe,yBAMdA,EAASC,MANK,2CAAH,sDASPK,EAAe,CAC1BF,eAAAA,GAGIG,EAAoB,mCAAG,WAAMC,GAAN,uFACJb,EAAAA,EAAAA,IAAUa,EAAU,CACzCV,OAAQ,CACNC,QAASH,KAHc,cACrBI,EADqB,yBAMpBA,EAASC,MANW,2CAAH,sDASbQ,EAAqB,CAChCF,qBAAAA,GAGIG,EAAiB,mCAAG,WAAMC,GAAN,uFACDhB,EAAAA,EAAAA,IAAA,6BAAgCgB,GAAS,CAC9Db,OAAQ,CACNC,QAASH,KAHW,cAClBI,EADkB,yBAMjBA,EAASC,KAAKC,SANG,2CAAH,sDASVU,EAAkB,CAC7BF,kBAAAA,E,gKCAF,EAjDqB,SAAC,GAAc,IAAZT,EAAW,EAAXA,KACdY,EACNZ,EADMY,YAAaC,EACnBb,EADmBa,MAAOC,EAC1Bd,EAD0Bc,eAAgBC,EAC1Cf,EAD0Ce,aAAcC,EACxDhB,EADwDgB,SAAUC,EAClEjB,EADkEiB,OAG9DC,EAAS,uBAAkC,GAAfH,GAAmBI,QAAQ,GAA9C,KACTC,EAASR,EAAW,yCACYA,GAClCS,EACEC,EAAU,OAAGL,QAAH,IAAGA,OAAH,EAAGA,EAAQM,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,KAEzD,OACE,iCACE,4BACE,0BACE,gBAAKC,IAAKP,EAAQQ,IAAKd,OAEzB,4BACE,4BACE,wBAAKD,KACL,uBAAIK,QAEN,4BACE,sCACA,uBAAIF,QAEN,4BACE,oCACA,uBAAIM,cAIV,4BACE,oDACA,SAAC,KAAD,CAASO,GAAG,OAAZ,mBACA,SAAC,KAAD,CAASA,GAAG,UAAZ,0BAIP,E,kBCxBD,EAdiB,SAAC,GAAsB,IAApBA,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,SACtB,OACE,UAAC,KAAD,CAAMD,GAAIA,EAAV,WACE,SAAC,MAAD,CAAoBE,KAAK,OACxBD,IAGN,EC4BD,EAjCyB,WAAO,IAAD,IACrBE,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEMC,EAAY,qBADDC,EAAAA,EAAAA,MACaC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,UAiB7C,OAfAC,EAAAA,EAAAA,YAAU,WACRP,GAAa,GACb,IAAMQ,EAAQ,mCAAG,6GAEczC,EAAAA,GAAAA,eAA4B2B,GAF1C,OAEPe,EAFO,OAGbX,EAASW,GAHI,gDAKbP,EAAS,EAAD,IALK,yBAObF,GAAa,GAPA,4EAAH,qDAUdQ,EAASd,EACV,GAAE,CAACA,KAGF,iCACE,SAAC,EAAD,CAAUH,GAAIY,EAAd,qBACCJ,GAAY,SAACW,EAAA,EAAD,KAAa,SAAC,EAAD,CAAchD,KAAMmC,KAC9C,SAAC,KAAD,IACCI,IAAS,mEAGf,C","sources":["api.js","components/MovieDetails/MovieDetails.jsx","components/BackLink/BackLink.jsx","pages/MovieDetailsPage.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '866c584b953aab9d6c2151363c4952f3';\n\nconst fetchTrendingMovies = async () => {\n  const response = await axios.get('/trending/movie/day', {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.results;\n};\n\nexport const getTrendingMovies = {\n  fetchTrendingMovies,\n};\n\nconst fetchMovieById = async id => {\n  const response = await axios.get(`movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n\nexport const getMovieById = {\n  fetchMovieById,\n};\n\nconst fetchMovieByPathname = async pathname => {\n  const response = await axios.get(pathname, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n\nexport const getMovieByPathname = {\n  fetchMovieByPathname,\n};\n\nconst fetchMovieByQuery = async query => {\n  const response = await axios.get(`search/movie?query=${query}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.results;\n};\n\nexport const getMovieByQuery = {\n  fetchMovieByQuery,\n};\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport Placeholder from 'images/placeholder.jpg';\nimport PropTypes from 'prop-types';\n\nconst MovieDetails = ({ data }) => {\n  const { poster_path, title, original_title, vote_average, overview, genres } =\n    data;\n\n  const userScore = `User Score: ${(vote_average * 10).toFixed(0)}%`;\n  const poster = poster_path\n    ? `https://image.tmdb.org/t/p/w500${poster_path}`\n    : Placeholder;\n  const genresList = genres?.map(genre => genre.name).join(' ');\n\n  return (\n    <>\n      <div>\n        <div>\n          <img src={poster} alt={original_title} />\n        </div>\n        <div>\n          <div>\n            <h1>{title}</h1>\n            <p>{userScore}</p>\n          </div>\n          <div>\n            <h2>Overview</h2>\n            <p>{overview}</p>\n          </div>\n          <div>\n            <h3>Genres</h3>\n            <p>{genresList}</p>\n          </div>\n        </div>\n      </div>\n      <div>\n        <h3>Additional Information</h3>\n        <NavLink to=\"cast\">Cast</NavLink>\n        <NavLink to=\"reviews\">Reviews</NavLink>\n      </div>\n    </>\n  );\n};\n\nMovieDetails.propTypes = {\n  poster_path: PropTypes.string,\n  title: PropTypes.string,\n  original_title: PropTypes.string,\n  vote_average: PropTypes.number,\n  overview: PropTypes.string,\n  genres: PropTypes.array,\n};\n\nexport default MovieDetails;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { AiOutlineArrowLeft } from 'react-icons/ai';\nimport PropTypes from 'prop-types';\n\nconst BackLink = ({ to, children }) => {\n  return (\n    <Link to={to}>\n      <AiOutlineArrowLeft size=\"14\" />\n      {children}\n    </Link>\n  );\n};\n\nBackLink.propTypes = {\n  to: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  children: PropTypes.node.isRequired,\n};\n\nexport default BackLink;\n","import React, { useEffect, useState } from 'react';\nimport { useParams, useLocation, Outlet } from 'react-router-dom';\nimport { getMovieById } from 'api';\nimport MovieDetails from 'components/MovieDetails/MovieDetails';\nimport Loader from 'components/Loader/Loader';\nimport BackLink from 'components/BackLink/BackLink';\n\nconst MovieDetailsPage = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/movies';\n\n  useEffect(() => {\n    setIsLoading(true);\n    const getMovie = async () => {\n      try {\n        const fetchedMovie = await getMovieById.fetchMovieById(movieId);\n        setMovie(fetchedMovie);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getMovie(movieId);\n  }, [movieId]);\n\n  return (\n    <>\n      <BackLink to={backLinkHref}>Go back</BackLink>\n      {isLoading ? <Loader /> : <MovieDetails data={movie} />}\n      <Outlet />\n      {error && <p>Something went wrong. Try again later</p>}\n    </>\n  );\n};\n\nexport default MovieDetailsPage;\n"],"names":["axios","API_KEY","fetchTrendingMovies","params","api_key","response","data","results","getTrendingMovies","fetchMovieById","id","getMovieById","fetchMovieByPathname","pathname","getMovieByPathname","fetchMovieByQuery","query","getMovieByQuery","poster_path","title","original_title","vote_average","overview","genres","userScore","toFixed","poster","Placeholder","genresList","map","genre","name","join","src","alt","to","children","size","movieId","useParams","useState","movie","setMovie","isLoading","setIsLoading","error","setError","backLinkHref","useLocation","state","from","useEffect","getMovie","fetchedMovie","Loader"],"sourceRoot":""}
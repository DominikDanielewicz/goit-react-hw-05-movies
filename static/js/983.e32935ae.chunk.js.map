{"version":3,"file":"static/js/983.e32935ae.chunk.js","mappings":"2RAEAA,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEVC,EAAmB,mCAAG,oGACHF,EAAAA,EAAAA,IAAU,sBAAuB,CACtDG,OAAQ,CACNC,QAASH,KAHa,cACpBI,EADoB,yBAMnBA,EAASC,KAAKC,SANK,2CAAH,qDASZC,EAAoB,CAC/BN,oBAAAA,GAGIO,EAAc,mCAAG,WAAMC,GAAN,uFACEV,EAAAA,EAAAA,IAAA,gBAAmBU,GAAM,CAC9CP,OAAQ,CACNC,QAASH,KAHQ,cACfI,EADe,yBAMdA,EAASC,MANK,2CAAH,sDASPK,EAAe,CAC1BF,eAAAA,GAGIG,EAAoB,mCAAG,WAAMC,GAAN,uFACJb,EAAAA,EAAAA,IAAUa,EAAU,CACzCV,OAAQ,CACNC,QAASH,KAHc,cACrBI,EADqB,yBAMpBA,EAASC,MANW,2CAAH,sDASbQ,EAAqB,CAChCF,qBAAAA,GAGIG,EAAiB,mCAAG,WAAMC,GAAN,uFACDhB,EAAAA,EAAAA,IAAA,6BAAgCgB,GAAS,CAC9Db,OAAQ,CACNC,QAASH,KAHW,cAClBI,EADkB,yBAMjBA,EAASC,KAAKC,SANG,2CAAH,sDASVU,EAAkB,CAC7BF,kBAAAA,E,sHCpDWG,EAAYC,EAAAA,GAAAA,IAAH,uEAKTC,EAAmBD,EAAAA,GAAAA,GAAH,oHAQhBE,EAAiBF,EAAAA,GAAAA,GAAH,oYAgBdG,EAAkBH,EAAAA,GAAAA,IAAH,+DAKfI,EAAkBJ,EAAAA,GAAAA,GAAH,wJ,SCwB5B,EAjDmB,SAAC,GAAc,IAAZb,EAAW,EAAXA,KACdkB,GAAWC,EAAAA,EAAAA,MACXZ,EAAWW,EAASX,SAEpBa,EAAiB,SAAAC,GACrB,IAAIC,EAAQD,EACZ,GAAIC,EAAMC,OAAS,GAAI,CACrB,IAAMC,EAAiBF,EAAMG,YAAY,IAAK,IAC9CH,EAAQA,EAAMI,MAAM,EAAGF,GAAkB,KAC1C,CACD,OAAOF,CACR,EAED,OACE,SAACV,EAAD,WACE,SAACE,EAAD,UACGd,EAAK2B,KAAI,SAAAC,GAAK,OACb,SAACb,EAAD,WACE,UAAC,KAAD,CACEc,GAAiB,MAAbtB,EAAA,iBAA6BqB,EAAMxB,IAAnC,UAA6CwB,EAAMxB,IACvD0B,MAAO,CAAEC,KAAMb,GAFjB,WAIE,SAACF,EAAD,CACEgB,IACEJ,EAAMK,YAAN,yCACsCL,EAAMK,aACxCC,EAENC,IAAKP,EAAMQ,kBAEb,SAACnB,EAAD,UAAkBG,EAAeQ,EAAMN,aAbtBM,EAAMxB,GADd,OAqBtB,C,mICXD,UAhCiB,WACf,OAA4BiC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACRH,GAAa,GACb,IAAMI,EAAS,mCAAG,6GAEc3C,EAAAA,GAAAA,sBAFd,OAER4C,EAFQ,OAGdP,GAAU,OAAIO,IAHA,gDAKdH,EAAS,EAAD,IALM,yBAOdF,GAAa,GAPC,4EAAH,qDAWfI,GACD,GAAE,KAGD,6BACE,4CACA,2BACGL,GAAY,SAAC,IAAD,KAAa,SAAC,IAAD,CAAYxC,KAAMsC,IAC3CI,IAAS,sEAIjB,C","sources":["api.js","components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","pages/HomePage.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '866c584b953aab9d6c2151363c4952f3';\n\nconst fetchTrendingMovies = async () => {\n  const response = await axios.get('/trending/movie/day', {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.results;\n};\n\nexport const getTrendingMovies = {\n  fetchTrendingMovies,\n};\n\nconst fetchMovieById = async id => {\n  const response = await axios.get(`movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n\nexport const getMovieById = {\n  fetchMovieById,\n};\n\nconst fetchMovieByPathname = async pathname => {\n  const response = await axios.get(pathname, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n\nexport const getMovieByPathname = {\n  fetchMovieByPathname,\n};\n\nconst fetchMovieByQuery = async query => {\n  const response = await axios.get(`search/movie?query=${query}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.results;\n};\n\nexport const getMovieByQuery = {\n  fetchMovieByQuery,\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  padding-top: 60px;\n  padding-bottom: 50px;\n`;\n\nexport const StyledMoviesList = styled.ul`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: 30px;\n  width: 100%;\n`;\n\nexport const MoviesListCard = styled.li`\n  cursor: pointer;\n  flex-basis: calc((100% - 30px) / 2);\n  max-width: calc((100% - 30px) / 2);\n\n  @media screen and (min-width: 768px) {\n    flex-basis: calc((100% - 60px) / 3);\n    max-width: calc((100% - 60px) / 3);\n  }\n\n  @media screen and (min-width: 1200px) {\n    flex-basis: calc((100% - 90px) / 4);\n    max-width: calc((100% - 90px) / 4);\n  }\n`;\n\nexport const MoviesListImage = styled.img`\n  border-radius: 5px;\n  width: 100%;\n`;\n\nexport const MoviesListTitle = styled.h2`\n  word-wrap: break-word;\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 1.4;\n  color: #ffa500;\n  margin-top: 10px;\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Placeholder from 'images/placeholder.jpg';\nimport {\n  Container,\n  StyledMoviesList,\n  MoviesListCard,\n  MoviesListImage,\n  MoviesListTitle,\n} from './MoviesList.styled';\n\nconst MoviesList = ({ data }) => {\n  const location = useLocation();\n  const pathname = location.pathname;\n\n  const shortenedTitle = movietitle => {\n    let title = movietitle;\n    if (title.length > 30) {\n      const lastSpaceIndex = title.lastIndexOf(' ', 32);\n      title = title.slice(0, lastSpaceIndex) + '...';\n    }\n    return title;\n  };\n\n  return (\n    <Container>\n      <StyledMoviesList>\n        {data.map(movie => (\n          <MoviesListCard key={movie.id}>\n            <Link\n              to={pathname === '/' ? `movies/${movie.id}` : `${movie.id}`}\n              state={{ from: location }}\n            >\n              <MoviesListImage\n                src={\n                  movie.poster_path\n                    ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n                    : Placeholder\n                }\n                alt={movie.original_title}\n              />\n              <MoviesListTitle>{shortenedTitle(movie.title)}</MoviesListTitle>\n            </Link>\n          </MoviesListCard>\n        ))}\n      </StyledMoviesList>\n    </Container>\n  );\n};\n\nMoviesList.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      key: PropTypes.number,\n      id: PropTypes.number,\n      title: PropTypes.string,\n    })\n  ),\n};\n\nexport default MoviesList;\n","import MoviesList from 'components/MoviesList/MoviesList';\nimport React, { useEffect, useState } from 'react';\nimport { getTrendingMovies } from '../api';\nimport Loader from './../components/Loader/Loader';\n\nconst HomePage = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const getMovies = async () => {\n      try {\n        const fetchedMovies = await getTrendingMovies.fetchTrendingMovies();\n        setMovies([...fetchedMovies]);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getMovies();\n  }, []);\n\n  return (\n    <main>\n      <h2>Trending today</h2>\n      <div>\n        {isLoading ? <Loader /> : <MoviesList data={movies} />}\n        {error && <p>Something went wrong. Try again later</p>}\n      </div>\n    </main>\n  );\n};\n\nexport default HomePage;\n"],"names":["axios","API_KEY","fetchTrendingMovies","params","api_key","response","data","results","getTrendingMovies","fetchMovieById","id","getMovieById","fetchMovieByPathname","pathname","getMovieByPathname","fetchMovieByQuery","query","getMovieByQuery","Container","styled","StyledMoviesList","MoviesListCard","MoviesListImage","MoviesListTitle","location","useLocation","shortenedTitle","movietitle","title","length","lastSpaceIndex","lastIndexOf","slice","map","movie","to","state","from","src","poster_path","Placeholder","alt","original_title","useState","movies","setMovies","isLoading","setIsLoading","error","setError","useEffect","getMovies","fetchedMovies"],"sourceRoot":""}